{"version":3,"file":"static/js/421.d8d4f192.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/dialogs/Dialogs.module.css?04a9","webpack://samurai-way/./src/components/dialogs/chatMenu/ChatMenu.module.css?6f74","webpack://samurai-way/./src/components/dialogs/chatMenu/chatMenuItem/ChatMenuItem.module.css?e7f7","components/dialogs/chatMenu/chatMenuItem/ChatMenuItem.tsx","components/dialogs/chatMenu/ChatMenu.tsx","webpack://samurai-way/./src/components/dialogs/dialogsSection/DialogsSection.module.css?f9b4","webpack://samurai-way/./src/components/dialogs/dialogsSection/myDialog/MyDialog.module.css?3b1d","components/dialogs/dialogsSection/myDialog/MyDialog.tsx","webpack://samurai-way/./src/components/dialogs/dialogsSection/dialogFriend/DialogFriend.module.css?afe2","components/dialogs/dialogsSection/dialogFriend/DialogFriend.tsx","components/dialogs/dialogsSection/dialogForm/DialogForm.tsx","hoc/withAuthRedirect.tsx","components/dialogs/dialogsSection/DialogsSectionContainer.tsx","components/dialogs/dialogsSection/DialogsSection.tsx","components/dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Dialogs_content__k3Toe\",\"dialog_section\":\"Dialogs_dialog_section__emTws\"};","// extracted by mini-css-extract-plugin\nexport default {\"chat_wrapper\":\"ChatMenu_chat_wrapper__bRy1D\",\"chat_content_wrapper\":\"ChatMenu_chat_content_wrapper__J7RAb\"};","// extracted by mini-css-extract-plugin\nexport default {\"chatItem\":\"ChatMenuItem_chatItem__niTiP\",\"active\":\"ChatMenuItem_active__5gmQF\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './ChatMenuItem.module.css'\r\n\r\n\r\ntype ChatMenuItemPropsType = {\r\n  name: string\r\n  id: number\r\n}\r\n\r\nexport const ChatMenuItem = (props:ChatMenuItemPropsType) => {\r\n\r\n  let {name, id} = props;\r\n\r\n  let path = '/messages/' + id;\r\n\r\n  return (\r\n    <li><NavLink to={path} className={s.chatItem}>{name}</NavLink></li>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport s from './ChatMenu.module.css'\r\nimport { ChatMenuItem } from './chatMenuItem/ChatMenuItem';\r\nimport { ContactType } from '../../../redux/store';\r\nimport { AppRootStateType } from '../../../redux/redux-store';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\ntype ChatMenyPropsType = {\r\n  messageContacts: ContactType[]\r\n}\r\n\r\nexport const ChatMenu = ({messageContacts}: ChatMenyPropsType) => {\r\n\r\n  return (\r\n    <div className={s.chat_wrapper}>\r\n      <div className={s.chat_content_wrapper}>\r\n        <h2>Let's Chat</h2>\r\n\r\n        <ul>\r\n          {messageContacts.map(contact => {\r\n            return <ChatMenuItem key={contact.id} name={contact.name} id={contact.id}/>\r\n          })}\r\n        </ul>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n  return {\r\n    messageContacts: state.dialogsPage.messageContacts,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ChatMenu);","// extracted by mini-css-extract-plugin\nexport default {\"dialog_section\":\"DialogsSection_dialog_section__MEaZo\",\"title_wrapper\":\"DialogsSection_title_wrapper__7SMM4\",\"message_input\":\"DialogsSection_message_input__+REaZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog_content_wrapper\":\"MyDialog_dialog_content_wrapper__WtSQn\",\"dialog_wrapper\":\"MyDialog_dialog_wrapper__5mA98\",\"user_info\":\"MyDialog_user_info__oVGFe\"};","import React from 'react';\r\nimport photo from '../../../../assets/cat-profile2.jpg'\r\nimport s from './MyDialog.module.css'\r\nimport { DialogItemType } from '../../../../redux/dialogs-reducer';\r\n\r\ntype DialogPropsType = {\r\n  dialog: DialogItemType\r\n}\r\n\r\nexport const MyDialog:React.FC<DialogPropsType> = (props) => {\r\n\r\n  let {id, name, message} = props.dialog;\r\n\r\n  return (\r\n    <div id={id.toString()} className={s.dialog_wrapper}>\r\n\r\n      <div className={s.dialog_content_wrapper}>\r\n\r\n        <div className={s.user_info}>\r\n          <h3>{name}</h3>\r\n          <p>{message}</p>\r\n        </div>\r\n\r\n        <img src={photo} alt=\"user\" />\r\n\r\n    </div>\r\n\r\n  </div>\r\n  );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog_content_wrapper\":\"DialogFriend_dialog_content_wrapper__867Nv\",\"dialog_wrapper\":\"DialogFriend_dialog_wrapper__NP3Y2\",\"user_info\":\"DialogFriend_user_info__tVbeg\"};","import React from 'react';\r\nimport s from './DialogFriend.module.css'\r\nimport photo4 from '../../../../assets/friend4.jpg'\r\nimport { DialogItemType } from '../../../../redux/dialogs-reducer';\r\n\r\n\r\ntype DialogPropsType = {\r\n  dialog: DialogItemType\r\n}\r\n\r\nexport const DialogFriend: React.FC<DialogPropsType> = (props) => {\r\n\r\n  let {id, name, message} = props.dialog;\r\n\r\n  return (\r\n    <div id={id.toString()} className={s.dialog_wrapper}>\r\n\r\n      <div className={s.dialog_content_wrapper}>\r\n\r\n        <img src={photo4} alt=\"user\" />\r\n\r\n        <div className={s.user_info}>\r\n          <h3>{name}</h3>\r\n          <p>{message}</p>\r\n        </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n  );\r\n};\r\n\r\n","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport s from '../DialogsSection.module.css'\r\n\r\nimport { Button } from '../../../button/Button';\r\nimport { Textarea } from '../../../common/formContolls/FormControls';\r\nimport { maxLenghtCreator, required } from '../../../../utils/validators/validators';\r\n\r\nexport type DialogFormDataType = {\r\n  currentMessageText: string\r\n}\r\n\r\nconst maxLength50 = maxLenghtCreator(50)\r\n\r\nconst DialogForm: React.FC<InjectedFormProps<DialogFormDataType>> = (props:InjectedFormProps<DialogFormDataType> ) => {\r\n  return (\r\n    <div className={s.message_input}>\r\n      <form onSubmit={props.handleSubmit}>\r\n        <Field\r\n                    placeholder='Enter message...'\r\n                    //component='textarea'\r\n                    component={Textarea}\r\n                    validate={[required, maxLength50]}\r\n                    name='currentMessageText'\r\n                    type='text'\r\n        />\r\n      <Button type='submit' name='post'/>\r\n\r\n      </form>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport const DialogReduxForm = reduxForm<DialogFormDataType>({\r\n  form: 'dialog'\r\n})(DialogForm)","import { Component, ComponentType } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppRootStateType } from \"../redux/redux-store\";\r\nimport { connect } from \"react-redux\";\r\n\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth\r\n  }\r\n}\r\n\r\n//создаем контейнерную компоненту и возвращаем ее\r\nexport function withAuthRedirect<T>(ComponentForRedirect: ComponentType<T>) {\r\n\r\n  const RedirectComponent = (props: MapStateToPropsType) => { //приходит компонента с пропсами с типами MapStateToPropsType\r\n                                                          //потому что мы законнектили ее (см ниже)\r\n    let {isAuth, ...restProps} = props; //здесь будут пропсы от ComponentForRedirect +  MapStateToPropsType\r\n\r\n    if (!isAuth) { //if user is not authorized, redirect to Login page\r\n      return <Redirect to='/login'/>\r\n    }\r\n    return <ComponentForRedirect {...restProps as T & {}}/> //должны прокинуть все пропсы, с к-ыми эта компонента пришла,\r\n                                                          // т.е. без isAuth уже\r\n  }\r\n\r\n  //коннектим mapStateToPropsForRedirect => создаем контейнерную компоненту над RedirectComponent и прокидываем в нее пропсы\r\n  const  ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n  return ConnectedRedirectComponent;\r\n}","import React, { Dispatch } from 'react';\r\nimport { DialogItemType, DialogReducerActionType, addMessageToDialogAC } from '../../../redux/dialogs-reducer';\r\nimport { DialogsSection } from './DialogsSection';\r\nimport { connect } from 'react-redux';\r\nimport { AppRootStateType } from '../../../redux/redux-store';\r\nimport { withAuthRedirect } from '../../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n  dialog: DialogItemType[],\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n  addMessageToDialog: (userId: number, userName: string, newMessage: string) => void\r\n}\r\n\r\nexport type DialogsSectionPropsType = MapDispatchToPropsType & MapStateToPropsType;\r\n\r\n//создаем контейнерную компоненту над DialogsSection (по факту возвращаем 2 контейнерные компоненты над DialogsSection)\r\n//const AuthRedirectComponent = withAuthRedirect(DialogsSection);\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n  return {\r\n    dialog: state.dialogsPage.dialogs[1],\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<DialogReducerActionType>): MapDispatchToPropsType => {\r\n  return {\r\n    addMessageToDialog: (userId, userName, newMessage) => {\r\n      dispatch(addMessageToDialogAC(userId, userName, newMessage))\r\n    },\r\n  }\r\n}\r\n\r\n\r\n//этот код вместо\r\n//const AuthRedirectComponent = withAuthRedirect(DialogsSection); и\r\n//connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n//compose - позволяет создавать последовательный вызов ф-ций с передачей результута вызово предыдщуей ф-ции\r\n// в последующую\r\nexport const DialogsSectionContainer = compose<React.ComponentType>( //говорит реакту, что создаем комоненту\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect  //защищаем от вхождения, если не залогинены в системе\r\n)(DialogsSection)\r\n\r\n//export const DialogsSectionContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n","import React from 'react';\r\nimport s from './DialogsSection.module.css'\r\nimport { MyDialog } from './myDialog/MyDialog';\r\nimport { DialogFriend } from './dialogFriend/DialogFriend';\r\nimport { Button } from '../../button/Button';\r\nimport { DialogsSectionPropsType } from './DialogsSectionContainer';\r\nimport { DialogFormDataType, DialogReduxForm } from './dialogForm/DialogForm';\r\n\r\n\r\nexport const DialogsSection:React.FC<DialogsSectionPropsType> = (props) => {\r\n    //с помощью React.createRef\r\n/*   переменная newPostText будет содержать ссылку на DOM-узел <textarea>, и вы можете\r\nиспользовать эту ссылку в коде для взаимодействия с этим элементом, таким как получение\r\n его значения или изменение его свойств.\r\n */\r\n  const newDialogMessage:React.LegacyRef<HTMLTextAreaElement> = React.createRef();\r\n\r\n  const addMessageToDialog = (values: DialogFormDataType) => { //приходят данные из формы\r\n    let newMessage = values.currentMessageText;\r\n    props.addMessageToDialog(0, 'Fluffy Gangster', newMessage)\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n/*   if (!props.isAuth) {\r\n    return <Redirect to={'/login'}/>\r\n  } */\r\n\r\n  return (\r\n    <div className = {s.dialog_section}>\r\n        <div className ={s.title_wrapper}>\r\n            <h2>Cat Talks</h2>\r\n        </div>\r\n\r\n        {props.dialog.map(d => d.name === 'Fluffy Gangster' ?  <MyDialog dialog={d} key={d.id}/> : <DialogFriend dialog={d} key={d.id}/>)}\r\n\r\n        <DialogReduxForm onSubmit={addMessageToDialog}/>\r\n        {/* <div className={s.message_input}>\r\n          <textarea\r\n                  ref={newDialogMessage}\r\n                  placeholder='Enter message...'\r\n                  value={props.currentMessageText}\r\n                  onChange={onChangeHandler}>\r\n          </textarea>\r\n          <Button name='post' callback={addMessageToDialog}/>\r\n        </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\n","import React, { useContext } from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport ChatMenu from './chatMenu/ChatMenu';\r\nimport { DialogsSectionContainer } from './dialogsSection/DialogsSectionContainer';\r\n\r\n\r\nconst Dialogs = () => {\r\n  console.log('Dialogs')\r\n  return (\r\n    <div className={s.content}>\r\n      <DialogsSectionContainer/>\r\n      <ChatMenu  />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs; //require default export for lazy loading\r\n\r\n"],"names":["ChatMenuItem","props","name","id","path","_jsx","children","NavLink","to","className","s","connect","state","messageContacts","dialogsPage","_ref","_jsxs","map","contact","MyDialog","message","dialog","toString","src","photo","alt","DialogFriend","photo4","maxLength50","maxLenghtCreator","DialogReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","type","Button","mapStateToProps","isAuth","auth","DialogsSectionContainer","compose","dialogs","dispatch","addMessageToDialog","userId","userName","newMessage","addMessageToDialogAC","ComponentForRedirect","restProps","Redirect","d","values","currentMessageText","Dialogs","console","log","ChatMenu"],"sourceRoot":""}